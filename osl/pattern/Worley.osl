/*
 *  Copyright 2022 LAIKA. Modifications from Shader Writing in OSL by Mitch J Prater 2024.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader pattern_Worley
[[
    int rfm_nodeid = 1306971,
    string rfm_classification = "rendernode/RenderMan/pattern/OSLBook"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Produces various Worley/Voronoi patterns. "
            "These are all based on the distances between jittered cellular points. "
    ]],

    point Space = P
    [[
        string readOnly = "True",
        string help =
            "Defines the space in which the pattern is generated. "
            "If not connected, \"object\" space <tt>Po</tt> will be used. "
    ]],

    float Size = 1.0
    [[
        int slider = 1, float slidermin = 0.1, float slidercenter = 1.0, float slidermax = 10.0,
        string help =
            "Controls the size of the pattern variations. "
    ]],

    int DistanceMeasure = 0
    [[
        string label = "Distance Measure",
        string widget = "mapper",
        string options = "Euclidean:0|Manhattan:1|Chebyshev:2|Minkowsky:3",
        string help =
            "Selects the metric is used to measure distances "
            "between the jittered cellular points. "
    ]],

    float MinkowskyExponent = 10.0
    [[
        string label = "Minkowsky Exponent",
        int slider = 1, float slidermin = 1.0, float slidermax = 50.0, float slidercenter = 10.0,
        string conditionalVisOp = "equalTo",
        string conditionalVisPath = "../DistanceMeasure",
        string conditionalVisValue = "3",
        string help =
            "Shapes the Minkowsky distance measure between "
            "Manhattan (1.0) and Chebyshev (infinity). "
    ]],

    float Jitter = 1.0
    [[
        string label = "Jitter",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "Determines how much to randomize the points. "
    ]],

    int Invert = 0
    [[
        string widget = "checkBox",
        string help =
            "Invert the float output values: 1 &ndash; result. "
    ]],

    int Variation = 0
    [[
        int slider = 1, int slidermin = 0, int slidermax = 10, int sensitivity = 1,
        string help =
            "Alters the specific pattern generated without "
            "changing any of its characteristics. "
    ]],

    output float F1 = 0.0,
    output float F2 = 0.0,
    output float F2minusF1 = 0.0,
    output color Voronoi = color(0.0)
)
{
    // Pattern generation space.
    point  Q = Space;

    // Fallback to un-displaced "object" space.
    if( !isconnected( Space ))
    {
        getattribute( "builtin", "Po", Q );
        Q = transform( "common", "object", Q );
    }

    // Size scaling.
    Q /= max( 1.0e-6, Size );

    // Divide Q into cells (unit cubes) and randomly place
    // a point within each. Then measure the distance between
    // the shaded point and the random point in each of the
    // 27 cells that contain it or are neighbors of it.
    F1 = F2 = 5.0; // Ensure these will be changed.

    // The shaded point's cell index.
    point  QIndex = floor( Q );

    for( int i = -1; i <= 1; i++ )
    {
        for( int j = -1; j <= 1; j++ )
        {
            for( int k = -1; k <= 1; k++ )
            {
                // The cell's index and its random offset.
                point  cellIndex = QIndex + vector(i,j,k);
                vector cellOffset = noise( "cell", cellIndex, Variation );

                // The cellâ€™s jittered point.
                point  cellQ = cellIndex + Jitter*cellOffset;

                // The shaded point's distance measure.
                float  dist;

                // Euclidean
                if( 0 == DistanceMeasure )
                {
                    dist = length( vector( Q-cellQ ));
                }

                // Manhattan
                else if( 1 == DistanceMeasure )
                {
                    vector distV = abs( vector( Q-cellQ ));
                    dist = ( distV.x + distV.y + distV.z ) * 0.5;
                }

                // Chebyshev
                else if( 2 == DistanceMeasure )
                {
                    vector distV = abs( vector( Q-cellQ ));
                    dist = max( max( distV.x, distV.y ), distV.z );
                }

                // Minkowsky
                else if( 3 == DistanceMeasure )
                {
                    vector distV = pow( abs( vector( Q-cellQ )), MinkowskyExponent );
                    dist = pow( distV.x + distV.y + distV.z, 1.0/MinkowskyExponent );
                }

                // New F1 or F2: is there a shorter distance?
                int  newF1 = int( select( 0, 1, dist < F1 ));
                int  newF2 = int( select( 0, !newF1, dist < F2 ));

                // New F1: update both.
                F2 = select( F2, F1, newF1 );   // F2 becomes the current F1.
                F1 = select( F1, dist, newF1 ); // F1 becomes the current dist.

                // New F2: update F2.
                F2 = select( F2, dist, newF2 );

                // Update Voronoi color.
                Voronoi = select( Voronoi, color(cellOffset), newF1 );
            }
        }
    } // End loops.

    // Additional float output.
    F2minusF1 = F2 - F1;

    // Apply inversion.
    if( Invert )
    {
        F1 = 1.0 - F1;
        F2 = 1.0 - F2;
        F2minusF1 = 1.0 - F2minusF1;
    }
}
