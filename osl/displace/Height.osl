/*
 *  Copyright 2022 LAIKA. Modifications from Shader Writing in OSL by Mitch J Prater 2024.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */

// Define the cube-root function for OSL versions that don't have it.
#if OSL_VERSION_MINOR >= 13
    float cube_root( float x ) { return cbrt(x); }
#else
    float cube_root( float x ) { return pow( x, (1./3.) ); }
#endif

shader displace_Height
[[
    int rfm_nodeid = 1306947,
    string rfm_classification = "rendernode/RenderMan/pattern/OSLBook"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Create a displacement vector, <b>DeltaP</b>, and its displaced "
            "surface normal, <b>DispN</b>, from a <b>Height</b> pattern input. "
    ]],

    float Height = 0.5
    [[
        string help =
            "This pattern is used to displace the surface along the "
            "<b>Disp Direction</b>. "
            "Its values are assumed to range from 0 to 1, so <b>Height</b> "
            "is first offset by &ndash;0.5 so it ranges from &ndash;0.5 to +0.5 "
            "to produce balanced displacements above and below the surface. "
    ]],

    int Invert = 0
    [[
        int connectable = 0,
        string label = "Invert",
        string widget = "checkBox",
        string help =
            "Controls whether to invert the <b>Height</b> displacement pattern: "
            "high becomes low, concave becomes convex, etc. "
    ]],

    float Offset = 0.0
    [[
        int slider = 1, float slidermin = -0.5, float slidermax = 0.5,
        string help =
            "The <b>Height</b> value is assumed to range from 0 to 1, "
            "so <b>Height</b> is first offset by &ndash;0.5 so it ranges "
            "from &ndash;0.5 to +0.5 to produce balanced variations above "
            "and below the surface. "
            "<p>"
            "<b>Offset</b> is then added to this new height value, "
            "allowing you to generate only peaks (<b>Offset</b> = <i>+0.5</i> ), "
            "a combination of peaks and valleys (<b>Offset</b> = <i>0.0</i> ), "
            "or just valleys (<b>Offset</b> = <i>&ndash;0.5</i> ) "
            "in the displaced surface. "
            "</p>"
    ]],

    normal DispDirection = Ng
    [[
        string label = "Disp Direction (Ng)",
        string help =
            "The direction in which to displace the surface. "
            "Specified in <b><i>common</i></b> space. "
            "This defines in what direction the <b>Height</b> "
            "and <b>Offset</b> values move the surface. "
            "Uses the geometric surface normal <tt>Ng</tt> if not connected. "
    ]],

    float Magnitude = 1.0
    [[
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Controls the magnitude of the resulting displacement. "
    ]],

    string MagnitudeSpace = "world"
    [[
        int connectable = 0,
        string label = "Magnitude Space",
        string widget = "popup", int editable = 1,
        string options =
            "object"
            "|world",
        string help =
            "Determines in what space the units of <b>Magnitude</b> are specified: "
            "how big is 1 unit of <b>Magnitude</b> displacement?"
    ]],

    output normal DispN = normal(0.0),
    output vector DeltaP = vector(0.0)
)
{
    float  height = Height;

    // Invert?
    if( Invert ) height =  1.0-height;

    // [0,1] Height value shifts the surface Â±0.5, plus the Offset.
    height = height-0.5 + Offset;

    // Apply the Magnitude.
    height *= Magnitude;

    // Scale height to common space.
    matrix  mag_to_common;
    if( getmatrix( MagnitudeSpace, "common", mag_to_common ))
    {
        height *= cube_root( abs( determinant( mag_to_common )));
    }
    else
    {
        warning(
            "Magnitude Space = \"%s\" couldn't be found. "
            "Using \"common\" space instead. ",
            MagnitudeSpace
            );
    }

    // The common-space change in the surface point P.
    DeltaP = height * DispDirection;

    // The displaced surface normal. Po = P during displacement rendering.
    // However, if the DeltaP result of cascaded displacements is being
    // used to produce a bumped shading normal, the original, un-displaced
    // surface point Po should be used.
    point  Po = P;
    getattribute( "builtin", "Po", Po );
    DispN = normalize( calculatenormal( Po + DeltaP ));
}
