/*
 *  Copyright 2022 LAIKA. Modifications from Shader Writing in OSL by Mitch J Prater 2024.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
shader space_3DXform
[[
    int rfm_nodeid = 1306984,
    string rfm_classification = "rendernode/RenderMan/pattern/OSLBook"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Transforms the 3D input space. "
    ]],

    point In = P
    [[
        string readOnly = "True",
        string help =
            "The 3D space to transform. "
            "If not connected, \"object\" space <tt>Po</tt> will be used. "
    ]],

    float Size = 1.0
    [[
        string label = "Size",
        int slider = 1, float slidermin = 0.1, float slidermax = 10.0, float slidercenter = 1.0,
        string help =
            "Adjusts the output's size. "
    ]],

    float SizeMultiplier = 1.0
    [[
        string label = "Size Multiplier",
        string widget = "mapper",
        string options =
            "x0.01:0.01"
            "|x0.1:0.1"
            "|x1:1.0"
            "|x10:10.0"
            "|x100:100.0",
        string help =
            "Multiplies the <b>Size</b> by this constant, changing its effective range. "
    ]],

    float XSize = 1.0
    [[
        string label = "X Size",
        int slider = 1, float slidermin = 0.1, float slidermax = 10.0, float slidercenter = 1.0,
        string help =
            "Adjusts the output's <b>Size</b> in the "
            "<b>X</b> direction. "
    ]],

    float YSize = 1.0
    [[
        string label = "Y Size",
        int slider = 1, float slidermin = 0.1, float slidermax = 10.0, float slidercenter = 1.0,
        string help =
            "Adjusts the output's <b>Size</b> in the "
            "<b>Y</b> direction. "
    ]],

    float ZSize = 1.0
    [[
        string label = "Z Size",
        int slider = 1, float slidermin = 0.1, float slidermax = 10.0, float slidercenter = 1.0,
        string help =
            "Adjusts the output's <b>Size</b> in the "
            "<b>Z</b> direction. "
    ]],

    float XRotation = 0.0
    [[
        string label = "X Rotation",
        int slider = 1, float slidermin = -180.0, float slidermax = 180.0,
        string help =
            "Rotates <b>Z</b> <i>into</i> <b>Y</b> by this many degrees. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    float YRotation = 0.0
    [[
        string label = "Y Rotation",
        int slider = 1, float slidermin = -180.0, float slidermax = 180.0,
        string help =
            "Rotates <b>X</b> <i>into</i> <b>Z</b> by this many degrees. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    float ZRotation = 0.0
    [[
        string label = "Z Rotation",
        int slider = 1, float slidermin = -180.0, float slidermax = 180.0,
        string help =
            "Rotates <b>Y</b> <i>into</i> <b>X</b> by this many degrees. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    float XOffset = 0.0
    [[
        string label = "X Offset",
        int slider = 1, float slidermin = -5.0, float slidermax = 5.0,
        string help =
            "<b>Offset</b> the output in the "
            "<b>&ndash;X</b> direction. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    float YOffset = 0.0
    [[
        string label = "Y Offset",
        int slider = 1, float slidermin = -5.0, float slidermax = 5.0,
        string help =
            "<b>Offset</b> the output in the "
            "<b>&ndash;Y</b> direction. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    float ZOffset = 0.0
    [[
        string label = "Z Offset",
        int slider = 1, float slidermin = -5.0, float slidermax = 5.0,
        string help =
            "<b>Offset</b> the output in the "
            "<b>&ndash;Z</b> direction. "
            "<p>"
            "Counterintuitively, this moves a pattern generated by this space in the opposite direction. "
            "</p>"
    ]],

    output point Out = point(0)
)
{
    Out = In;

    // Fallback to un-displaced "object" space.
    if( !isconnected( In ))
    {
        getattribute( "builtin", "Po", Out );
        Out = transform( "common", "object", Out );
    }

    // Parameter values.
    float  size = Size * SizeMultiplier;
    float  xSize = max( 1.0e-6, size * XSize );
    float  ySize = max( 1.0e-6, size * YSize );
    float  zSize = max( 1.0e-6, size * ZSize );
    float  xRotation = radians( XRotation );
    float  yRotation = radians( YRotation );
    float  zRotation = radians( ZRotation );

    // Size.
    Out /= point( xSize, ySize, zSize );

    // Rotate.
    float  sine, cosine;

    sincos( xRotation, sine, cosine );
    Out = point(
            Out.x,
            Out.y*cosine + Out.z*sine,
            Out.z*cosine - Out.y*sine
            );

    sincos( yRotation, sine, cosine );
    Out = point(
            Out.x*cosine - Out.z*sine,
            Out.y,
            Out.z*cosine + Out.x*sine
            );

    sincos( zRotation, sine, cosine );
    Out = point(
            Out.x*cosine + Out.y*sine,
            Out.y*cosine - Out.x*sine,
            Out.z
            );

    // Offset.
    Out -= vector( XOffset, YOffset, ZOffset );
}
