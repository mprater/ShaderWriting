/*
 *  Copyright 2022 LAIKA. Modifications from Shader Writing in OSL by Mitch J Prater 2024.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */

// Define the cube-root function for OSL versions that don't have it.
#if OSL_VERSION_MINOR >= 13
    float cube_root( float x ) { return cbrt(x); }
#else
    float cube_root( float x ) { return pow( x, (1./3.) ); }
#endif

shader space_3D
[[
    int rfm_nodeid = 1306976,
    string rfm_classification = "rendernode/RenderMan/pattern/OSLBook"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help =
            "Generates 3D values that stick to the desired <b>Coordinates</b> "
            "but are scaled to match the size of the desired <b>Size Space</b>. "
    ]],

    int DisplacedP = 0
    [[
        int connectable = 0,
        string label = "Displaced P",
        string widget = "checkBox",
        string help =
            "Determines whether to use the displaced surface, "
            "or the original un-displaced surface. "
            "<p>"
            "When <i>On</i>, use the displaced surface point <tt>P</tt>."
            "</p>"
            "When <i>Off</i>, use the un-displaced surface point <tt>Po</tt>."
    ]],

    string Coordinates = "object"
    [[
        int connectable = 0,
        string label = "Coordinates",
        string widget = "popup", int editable = 1,
        string options =
            "Primitive Variable"
            "|object"
            "|world",
        string help =
            "Selects which <b>Coordinates</b> the surface points are transformed to. "
            "This determines what the output values will <i>stick</i> to. "
            "<p>"
            "For pattern generation, you'll typically want a space "
            "that moves with objects, like a <i>Primitive Variable</i> "
            "or <i>object</i> space. "
            "</p>"
            "You may also type in the name of your own coordinate system. "
    ]],

    string PrimitiveVariable = "__Pref"
    [[
        int connectable = 0,
        string label = "Primitive Variable",
        string help =
            "When the <b>Coordinates</b> are set to <i>Primitive Variable</i>, "
            "use this value to specify which (point type) primitive variable to "
            "use instead of <tt>Po</tt> or <tt>P</tt>: the output values will "
            "then stick to this primvar. "
            "<p>"
            "If the given primvar cannot be found, <i>object</i> <b>Coordinates</b> "
            "will be used. "
            "</p>"
    ]],

    string SizeSpace = "world"
    [[
        int connectable = 0,
        string label = "Size Space",
        string widget = "popup", int editable = 1,
        string options =
            "object"
            "|world",
        string help =
            "Determines the size of the resulting spatial variations. "
            "<p>"
            "For example, specifying a globally uniform space here (such as <i>world</i>) "
            "will ensure that generated patterns match the <b>Size Space</b> regardless "
            "of what <b>Coordinates</b> are chosen for the pattern to stick to. "
            "</p>"
            "<p>"
            "Conversely, <i>object</i> <b>Coordinates</b> are fixed to each geometric "
            "object. So an object that's scaled differently from other objects in the "
            "scene will result in its pattern size being different from the other objects. "
            "</p>"
            "You may also type in the name of your own coordinate system. "
    ]],

    output point Out = point(0)
)
{
    // Referencing P is required for any down-stream auto-differentiation.
    Out = P;

    // Replace with un-displaced P?
    if( !DisplacedP ) getattribute( "builtin", "Po", Out );

    // Check for "Primitive Variable" Coordinates.
    if( "Primitive Variable" == Coordinates )
    {
        if( !getattribute( "primvar", PrimitiveVariable, Out ))
        {
            warning(
                "The point-type Primitive Variable = \"%s\" wasn't found. "
                "Using %s \"object\" Coordinates instead.",
                PrimitiveVariable,
                DisplacedP ? "displaced" : "un-displaced"
                );
        }
    }

    // Restore the original primvar values,
    // or start with "object" Coordinates.
    Out = transform( "common", "object", Out );

    // Apply Size Space scaling to Out.
    if( "Primitive Variable" != Coordinates )
    {
        matrix  object_to_coord;
        if( getmatrix( "object", Coordinates, object_to_coord ))
        {
            // Transform to Coordinates.
            Out = transform( object_to_coord, Out );

            // Apply SizeSpace scale.
            matrix  coord_to_size;
            if( getmatrix( Coordinates, SizeSpace, coord_to_size ))
            {
                Out *= cube_root( abs( determinant( coord_to_size )));
            }
            else
            {
                warning( "Size Space = \"%s\" wasn't found.", SizeSpace );
            }
        }
        else
        {
            warning( "Coordinates = \"%s\" wasn't found. Using \"object\" space.", Coordinates );
        }
    }
}
